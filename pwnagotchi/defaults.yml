# WARNING WARNING WARNING WARNING
#
# This file is recreated with default settings on every pwnagotchi restart,
# use /etc/pwnagotchi/config.yml to configure this unit.
#
#
# main algorithm configuration
main:
    # if set this will set the hostname of the unit. min length is 2, max length 25, only a-zA-Z0-9- allowed
    name: ''
    # currently implemented: en (default), de, el, fr, it, mk, nl, ru, se, pt-BR, es, pt
    lang: en
    # custom plugins path, if null only default plugins with be loaded
    custom_plugins:
    # which plugins to load and enable
    plugins:
        grid:
            enabled: true
            report: false # don't report pwned networks by default!
            exclude: # do not report the following networks (accepts both ESSIDs and BSSIDs)
                - YourHomeNetworkHere
        auto-update:
            enabled: true
            install: true # if false, it will only warn that updates are available, if true it will install them
            interval: 1 # every 1 hour
        net-pos:
            enabled: false
            api_key: 'test'
        gps:
            enabled: false
            gpsdHost: localhost
            gpsdPort: 2947
        webgpsmap:
            enabled: false
        onlinehashcrack:
            enabled: false
            email: ~
        wpa-sec:
            enabled: false
            api_key: ~
            api_url: "https://wpa-sec.stanev.org"
        wigle:
            enabled: false
            api_key: ~
        bt-tether:
            enabled: false # if you want to use this, set ui.display.web.address to 0.0.0.0
            devices:
              android-phone:
                enabled: false
                search_order: 1 # search for this first
                mac: ~ # mac of your bluetooth device
                ip: '192.168.44.44' # ip from which your pwnagotchi should be reachable
                netmask: 24
                interval: 1 # check every minute for device
                scantime: 10 # search for 10 seconds
                max_tries: 10 # after 10 tries of "not found"; don't try anymore
                share_internet: false
                priority: 1 # low routing priority; ios (prio: 999) would win here
              ios-phone:
                enabled: false
                search_order: 2 # search for this second
                mac: ~ # mac of your bluetooth device
                ip: '172.20.10.6' # ip from which your pwnagotchi should be reachable
                netmask: 24
                interval: 5 # check every 5 minutes for device
                scantime: 20
                max_tries: 0 # infinity
                share_internet: false
                priority: 999 # routing priority
        memtemp: # Display memory usage, cpu load and cpu temperature on screen
            enabled: false
            scale: celsius
            orientation: horizontal # horizontal/vertical
        paw-gps:
            enabled: false
            #The IP Address of your phone with Paw Server running, default (option is empty) is 192.168.44.1
            ip: ''
        gpio_buttons:
            enabled: false
            #The following is a list of the GPIO number for your button, and the command you want to run when it is pressed
            gpios:
              #20: 'touch /root/.pwnagotchi-auto && systemctl restart pwnagotchi'
              #21: 'shutdown -h now'
        led:
            enabled: true
            # for /sys/class/leds/led0/brightness
            led: 0
            # time in milliseconds for each element of the patterns
            delay: 200
            # o=on space=off, comment the ones you don't want
            patterns:
                loaded: 'oo  oo  oo oo  oo  oo  oo'
                updating: 'oo  oo  oo oo  oo  oo  oo'
                # internet_available: 'oo  oo  oo oo  oo  oo  oo'
                unread_inbox: 'oo  oo  oo oo  oo  oo  oo'
                ready: 'oo  oo  oo oo  oo  oo  oo'
                ai_ready: 'oo  oo  oo oo  oo  oo  oo'
                ai_training_start: 'oo  oo  oo oo  oo  oo  oo'
                ai_best_reward: 'oo  oo  oo oo  oo  oo  oo'
                ai_worst_reward: 'oo  oo  oo oo  oo  oo  oo'
                bored: 'oo  oo  oo oo  oo  oo  oo'
                sad: 'oo  oo  oo oo  oo  oo  oo'
                excited: 'oo  oo  oo oo  oo  oo  oo'
                lonely: 'oo  oo  oo oo  oo  oo  oo'
                rebooting: 'oo  oo  oo oo  oo  oo  oo'
                wait: 'oo  oo  oo oo  oo  oo  oo'
                sleep: 'oo  oo  oo oo  oo  oo  oo'
                wifi_update: 'oo  oo  oo oo  oo  oo  oo'
                association: 'oo  oo  oo oo  oo  oo  oo'
                deauthentication: 'oo  oo  oo oo  oo  oo  oo'
                handshake: 'oo  oo  oo oo  oo  oo  oo'
                epoch: 'oo  oo  oo oo  oo  oo  oo'
                peer_detected: 'oo  oo  oo oo  oo  oo  oo'
                peer_lost: 'oo  oo  oo oo  oo  oo  oo'
        webcfg:
          enabled: false
    # monitor interface to use
    iface: mon0
    # command to run to bring the mon interface up in case it's not up already
    mon_start_cmd: /usr/bin/monstart
    mon_stop_cmd: /usr/bin/monstop
    mon_max_blind_epochs: 50
    # if true, will not restart the wifi module
    no_restart: false
    # access points to ignore. Could be the ssid, bssid or the vendor part of bssid.
    whitelist:
        - EXAMPLE_NETWORK
        - ANOTHER_EXAMPLE_NETWORK
        - fo:od:ba:be:fo:od   # BSSID
        - fo:od:ba            # Vendor BSSID
    # if not null, filter access points by this regular expression
    filter: null
    # logging
    log:
        # file to log to
        path: /var/log/pwnagotchi.log
        rotation:
            enabled: true
            # specify a maximum size to rotate ( format is 10/10B, 10K, 10M 10G )
            size: '10M'

ai:
    # if false, only the default 'personality' will be used
    enabled: true
    path: /root/brain.nn
    # 1.0 - laziness = probability of start training
    laziness: 0.1
    # how many epochs to train on
    epochs_per_episode: 50
    params:
        # discount factor
        gamma: 0.99
        # the number of steps to run for each environment per update
        n_steps: 1
        # value function coefficient for the loss calculation
        vf_coef: 0.25
        # entropy coefficient for the loss calculation
        ent_coef: 0.01
        # maximum value for the gradient clipping
        max_grad_norm: 0.5
        # the learning rate
        learning_rate: 0.0010
        # rmsprop decay parameter
        alpha: 0.99
        # rmsprop epsilon
        epsilon: 0.00001
        # the verbosity level: 0 none, 1 training information, 2 tensorflow debug
        verbose: 1
        # type of scheduler for the learning rate update ('linear', 'constant', 'double_linear_con', 'middle_drop' or 'double_middle_drop')
        lr_schedule: 'constant'
        # the log location for tensorboard (if None, no logging)
        tensorboard_log: null

personality:
    # advertise our presence
    advertise: true
    # perform a deauthentication attack to client stations in order to get full or half handshakes
    deauth: true
    # send association frames to APs in order to get the PMKID
    associate: true
    # list of channels to recon on, or empty for all channels
    channels: []
    # minimum WiFi signal strength in dBm
    min_rssi: -200
    # number of seconds for wifi.ap.ttl
    ap_ttl: 120
    # number of seconds for wifi.sta.ttl
    sta_ttl: 300
    # time in seconds to wait during channel recon
    recon_time: 30
    # number of inactive epochs after which recon_time gets multiplied by recon_inactive_multiplier
    max_inactive_scale: 2
    # if more than max_inactive_scale epochs are inactive, recon_time *= recon_inactive_multiplier
    recon_inactive_multiplier: 2
    # time in seconds to wait during channel hopping if activity has been performed
    hop_recon_time: 10
    # time in seconds to wait during channel hopping if no activity has been performed
    min_recon_time: 5
    # maximum amount of deauths/associations per BSSID per session
    max_interactions: 3
    # maximum amount of misses before considering the data stale and triggering a new recon
    max_misses_for_recon: 5
    # number of active epochs that triggers the excited state
    excited_num_epochs: 10
    # number of inactive epochs that triggers the bored state
    bored_num_epochs: 15
    # number of inactive epochs that triggers the sad state
    sad_num_epochs: 25
    # number of encounters (times met on a channel) with another unit before considering it a friend and bond
    # also used for cumulative bonding score of nearby units
    bond_encounters_factor: 20000

# ui configuration
ui:
    # here you can customize the faces
    faces:
        look_r: '( ⚆_⚆)'
        look_l: '(☉_☉ )'
        look_r_happy: '( ◕‿◕)'
        look_l_happy: '(◕‿◕ )'
        sleep: '(⇀‿‿↼)'
        sleep2: '(≖‿‿≖)'
        awake: '(◕‿‿◕)'
        bored: '(-__-)'
        intense: '(°▃▃°)'
        cool: '(⌐■_■)'
        happy: '(•‿‿•)'
        excited: '(ᵔ◡◡ᵔ)'
        grateful: '(^‿‿^)'
        motivated: '(☼‿‿☼)'
        demotivated: '(≖__≖)'
        smart: '(✜‿‿✜)'
        lonely: '(ب__ب)'
        sad: '(╥☁╥ )'
        angry: "(-_-')"
        friend: '(♥‿‿♥)'
        broken: '(☓‿‿☓)'
        debug: '(#__#)'
    # ePaper display can update every 3 secs anyway, set to 0 to only refresh for major data changes
    # IMPORTANT: The lifespan of an eINK display depends on the cumulative amount of refreshes. If you want to
    # preserve your display over time, you should set this value to 0.0 so that the display will be refreshed only
    # if any of the important data fields changed (the uptime and blinking cursor won't trigger a refresh).
    fps: 0.0
    # web ui
    web:
      enabled: true
      address: '0.0.0.0'
      username: changeme # !!! CHANGE THIS !!!
      password: changeme # !!! CHANGE THIS !!!
      origin: null
      port: 8080
      # command to be executed when a new png frame is available
      # for instance, to use with framebuffer based displays:
      # on_frame: 'fbi --noverbose -a -d /dev/fb1 -T 1 /root/pwnagotchi.png > /dev/null 2>&1'
      on_frame: ''
    # hardware display
    display:
        enabled: true
        rotation: 180
        # Possible options inkyphat/inky, papirus/papi, waveshare_1/ws_1 or waveshare_2/ws_2, oledhat, lcdhat, waveshare154inch, waveshare27inch, waveshare29inch, dfrobot/df
        type: 'waveshare_2'
        # Possible options red/yellow/black (black used for monocromatic displays)
        # Waveshare tri-color 2.13in display can be over-driven with color set as 'fastAndFurious'
        # THIS IS POTENTIALLY DANGEROUS. DO NOT USE UNLESS YOU UNDERSTAND THAT IT COULD KILL YOUR DISPLAY
        color: 'black'

# bettercap rest api configuration
bettercap:
    # api scheme://hostname:port username and password
    scheme: http
    hostname: localhost
    port: 8081
    username: pwnagotchi
    password: pwnagotchi
    # folder where bettercap stores the WPA handshakes, given that
    # wifi.handshakes.aggregate will be set to false and individual
    # pcap files will be created in order to minimize the chances
    # of a single pcap file to get corrupted
    handshakes: /root/handshakes
    # events to mute in bettercap's events stream
    silence:
        - ble.device.new
        - ble.device.lost
        - ble.device.disconnected
        - ble.device.connected
        - ble.device.service.discovered
        - ble.device.characteristic.discovered
        - wifi.client.new
        - wifi.client.lost
        - wifi.client.probe
        - wifi.ap.new
        - wifi.ap.lost
        - mod.started
